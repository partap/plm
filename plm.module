<?php
// $Id$
/*
 * Poker League Manager: A Drupal module to manage our poker league
 * Todo:
 * - Fix current payout structure, add editor for payouts
 * - Menu for navigating within module
 *   - Main Page
 *     - Recent News (results, announcements)
 *   - Blocks
 *     -DONE Leaderboard, 
       -DONE Last Results, 
       - Next Game
 *   - Players
 *     -DONE list all
       - browse (search by nick, real name)
 *   - Results (browse past games, other seasons)
 *     -DONE games listed under plm/games/%game because we don't want to need
 *       the sid AND the gid.  Once we load the game, 
 *       we have sid and so we can either rewrite breadcrumbs,
 *       or use a custom seasons browsing menu or selector...investigate ?destination=xxx...
 *   -DONE Schedule (upcoming games)
 *   -DONE Current Rankings

 * - Handle final table  - Accumulate rakes?
 * - Publish game results when done (custom node type?)
 *   - send email to list
 *   - Allow comments, messages to admin
 * - Permissions
 *   -DONE Hide money stats from non-verified users
 *   -DONE Tie user accounts to player ids
 *   - require password for deleting seasons/players (popup?)
 * -DONE Theming (make it purty)
 * -DONE pulldown select/autocomplete for player names
 * - popups for creating referenced recs on the fly.  
 *     eg. import data or new game (create season), 
 *         results (create player)
 *
 */


require_once drupal_get_path('module', 'plm') .'/plm.inc';
require_once drupal_get_path('module', 'plm') .'/plm_db.inc';
require_once drupal_get_path('module', 'plm') .'/plm_file.inc';
require_once drupal_get_path('module', 'plm') .'/plm_admin.inc';


/*
 * Implementation of hook_init().
*/
function plm_init() {
  $stylesheet = drupal_get_path('theme', $GLOBALS['theme_key'] .'/plm.css');
  if (!file_exists($stylesheet)) {
    $stylesheet = drupal_get_path('module', 'plm') .'/plm.css';
  }
  drupal_add_css($stylesheet);
}


/*
 * Implementation of hook_menu().
*/
function plm_menu() {
  $items = array();
  //drupal_set_message('plm_menu() called');

  // $items['plm'] = array(
  //   'title' => 'Poker League (PLM)',
  //   'page callback' => 'plm_main',
  //   'access arguments' => array('access poker league content'),
  //   'description' => t('Poker League Pages'),
  //   'type' => MENU_NORMAL_ITEM,
  //   'weight' => -100,
  // );
  $items['plm/autocomplete/player'] = array(
    'title' => 'player autocomplete',
    'page callback' => 'plm_player_autocomplete',
    'access arguments' => array('access poker league content'),
    'type' => MENU_CALLBACK,
  );
  $items['plm/seasons'] = array(
    'title' => t('Seasons'),
    'description' => 'Browse All Seasons',
    'page callback' => 'plm_seasons_list',
    'page arguments' => array(NULL),
    'access arguments' => array('access poker league content'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 4,
    'menu_name' => 'plm',
  );
  $items['plm/seasons/list'] = array(
    'title'  => t('List Seasons'),
    'weight' => -1,
    'type'   => MENU_DEFAULT_LOCAL_TASK,
    'menu_name' => 'plm',
  );
  $items['plm/seasons/new'] = array(
    'title' => t('New Season'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plm_season_form', 'new'),
    'access arguments' => array('administer poker league'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'plm_admin.inc',
    'weight' => 0,
    'menu_name' => 'plm',
  ); 

  $items['plm/seasons/%plm_season'] = array(
    'title' => t('View Season'),
    'title callback' => 'plm_season_title', 
    'title arguments' => array(2), 
    'description' => 'View a poker season',
    'page callback' => 'plm_season_view',
    'page arguments' => array(2),
    'access arguments' => array('access poker league content'),
    //'type' => MENU_NORMAL_ITEM,
    //'type' => MENU_LOCAL_TASK,
    //'type' => MENU_CALLBACK,
  );
  $items['plm/seasons/%plm_season/view'] = array(
    'title'  => t('Schedule'),
    'weight' => -1,
    'type'   => MENU_DEFAULT_LOCAL_TASK,
    'menu_name' => 'plm',
  );
  $items['plm/seasons/%plm_season/edit'] = array(
    'title' => t('Edit'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plm_season_form', 2),
    'access arguments' => array('administer poker league'),
    //'type' => MENU_NORMAL_ITEM,
    'type' => MENU_LOCAL_TASK,
    'menu_name' => 'plm',
    'file' => 'plm_admin.inc',
  ); 
  $items['plm/seasons/%plm_season/delete'] = array(
    'title' => t('Delete'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plm_season_confirm_delete', 2),
    'access arguments' => array('administer poker league'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'plm_admin.inc',
  ); 
  $items['plm/seasons/%plm_season/rankings'] = array(
    'title' => t('Rankings'),
    'description' => 'View the current rankings for this season.',
    'page callback' => 'plm_rankings',
    'page arguments' => array(2),
    'access arguments' => array('access poker league content'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['plm/seasons/%plm_season/newgame'] = array(
    'title' => 'New Game',
    'description' => 'Set up a new game',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plm_game_form',  NULL, 2),
    'access arguments' => array('administer poker league'),
    'type' => MENU_LOCAL_TASK,
    'menu_name' => 'plm',
    'file' => 'plm_admin.inc',
  );


  $items['plm/games/%plm_game'] = array(
    'title' => t('Game'),
    'description' => 'View the details of a poker game',
    'page callback' => 'plm_game_view',
    'page arguments' => array(2),
    'access arguments' => array('access poker league content'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'plm',
  );
  $items['plm/games/%plm_game/view'] = array(
    'title'  => t('View'),
    'weight' => -1,
    'type'   => MENU_DEFAULT_LOCAL_TASK,
    'menu_name' => 'plm',
  );
  $items['plm/games/%plm_game/edit'] = array(
    'title' => t('Edit'),
    'description' => 'Edit the details of a poker game',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plm_game_form', 2),
    'access arguments' => array('administer poker league'),
    'type' => MENU_LOCAL_TASK,
    'menu_name' => 'plm',
    'file' => 'plm_admin.inc',
  );
  $items['plm/games/%plm_game/entrants'] = array(
    'title' => t('Entrants'),
    'description' => 'View the entrants of a poker game',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plm_entrants_form', 2),
    'access callback' => 'plm_entrants_tab_access',
    'access arguments' => array(2),//array('access poker league content'),
    'type' => MENU_LOCAL_TASK,
    'menu_name' => 'plm',
    'file' => 'plm.inc',
  );
  $items['plm/games/%plm_game/entrants/list'] = array(
    'title'  => t('List'),
    'weight' => -1,
    'type'   => MENU_DEFAULT_LOCAL_TASK,
    'menu_name' => 'plm',
  );


  $items['plm/games/%plm_game/entrants/add'] = array(
    'title' => 'Add Entrant',
    'description' => 'Register a player for this game',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plm_entrant_form',  NULL, 2),
    'access arguments' => array('administer poker league'),
    'type' => MENU_CALLBACK,
    'menu_name' => 'plm',
    'file' => 'plm_admin.inc',
  );
  $items['plm/entrants/%plm_entrant/edit'] = array(
    'title' => t('Edit'),
    'description' => 'Edit an game entrant',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plm_entrant_form', 2),
    'access arguments' => array('administer poker league'),
    'type' => MENU_CALLBACK,
    'menu_name' => 'plm',
    'file' => 'plm_admin.inc',
  );

  $items['plm/entrants/%plm_entrant/delete'] = array(
    'title' => t('Delete'),
    'description' => 'Delete a game entrant now',
    'page callback' => 'plm_entrant_really_delete',
    'page arguments' => array(2),
    'access arguments' => array('administer poker league'),
    'type' => MENU_CALLBACK,
    'menu_name' => 'plm',
    'file' => 'plm_admin.inc',
  );

  $items['plm/entrants/%plm_entrant/confirm_delete'] = array(
    'title' => t('Delete'),
    'description' => 'Delete a game entrant?',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plm_entrant_confirm_delete', 2),
    'access arguments' => array('administer poker league'),
    'type' => MENU_CALLBACK,
    'menu_name' => 'plm',
    'file' => 'plm_admin.inc',
  );


  $items['plm/players'] = array(
    'title' => t('Players'),
    'description' => 'List All Players',
    'page callback' => 'plm_players_list',
    'access arguments' => array('access poker league content'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 3,
    'menu_name' => 'plm',
  );
  $items['plm/players/list'] = array(
    'title'  => t('List'),
    'weight' => -1,
    'type'   => MENU_DEFAULT_LOCAL_TASK,
    'menu_name' => 'plm',
  );
  $items['plm/players/new'] = array(
    'title' => t('Add Player'),
    'description' => 'Add a New Player',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plm_player_form'),
    'access arguments' => array('administer poker league'),
    'type' => MENU_LOCAL_TASK,
    'menu_name' => 'plm',
    'file' => 'plm_admin.inc',
  );
  $items['plm/players/pid/%plm_player'] = array(
    'title' => t('Player'),
    'description' => 'Show player details',
    'page callback' => 'plm_player_view',
    'page arguments' => array(3),
    'access arguments' => array('access poker league content'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'plm',
  );
  $items['plm/players/pid/%plm_player/view'] = array(
    'title'  => t('View'),
    'weight' => -1,
    'type'   => MENU_DEFAULT_LOCAL_TASK,
    'menu_name' => 'plm',
  );
  $items['plm/players/pid/%plm_player/edit'] = array(
    'title'           => t('Edit'),
    'description'     => 'Edit player details',
    'page callback'   => 'drupal_get_form',
    'page arguments'  => array('plm_player_form', 3),
    'access callback' => 'plm_player_edit_access',
    'access arguments' => array(3),
    //'access arguments' => array('administer poker league'),
    'type' => MENU_LOCAL_TASK,
    'menu_name' => 'plm',
//    'type' => MENU_CALLBACK,
    'file' => 'plm_admin.inc',
  );
  $items['plm/players/pid/%plm_player/delete'] = array(
    'title' => t('Delete'),
    'description' => 'Delete player from the league roster',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plm_player_confirm_delete', 3),
    'access arguments' => array('administer poker league'),
    'type' => MENU_LOCAL_TASK,
    'menu_name' => 'plm',
    'file' => 'plm_admin.inc',
  );
  $items['plm/results/%plm_result/%/edit'] = array(
    'title' => t('Edit'),
    'description' => 'Edit result',
    'load arguments' => array(3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plm_result_form', 2),
    'access arguments' => array('administer poker league'),
    'file' => 'plm_admin.inc',
    'type' => MENU_CALLBACK,
    'menu_name' => 'plm',
  );
  $items['plm/results/%plm_result/%/delete'] = array(
    'title' => t('Delete Result'),
    'description' => 'Delete result from the league record',
    'load arguments' => array(3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plm_result_confirm_delete', 2),
   'access arguments' => array('administer poker league'),
    'type' => MENU_CALLBACK,
    'file' => 'plm_admin.inc',
    'menu_name' => 'plm',
  );
  $items['plm/rankings'] = array(
    'title' => t('Current Rankings'),
    'description' => 'View the current rankings for this season.',
    'page callback' => 'plm_rankings',
    'access arguments' => array('access poker league content'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 2,
    'menu_name' => 'plm',
  );
  $items['plm/schedule'] = array(
    'title' => t('Schedule/Results'),
    'description' => 'Browse Schedule/Results for Current Season',
    'page callback' => 'plm_season_view',
    'access arguments' => array('access poker league content'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 1,
    'menu_name' => 'plm',
  );
  $items['plm/ajax'] = array(
    'title' => 'Ajax Popup response URL',
    'page callback' => 'plm_ajax',
    'access arguments' => array('access poker league content'),
    'type' => 'MENU_CALLBACK',
    'menu_name' => 'plm',
  );
  // Admin Menu Items
  
  $items['admin/plm'] = array(
    'title' => 'Poker League (PLM)',
    'description' => 'Set up and run a poker league',
    'page callback' => 'plm_admin',
    'access arguments' => array('administer poker league'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -11,
    'file' => 'plm_admin.inc',
  );  
  $items['admin/plm/settings'] = array(
    'title' => 'Settings',
    'description' => 'General settings for poker league',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plm_settings'),
    'access arguments' => array('administer poker league'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'plm_admin.inc',
  );
  $items['admin/plm/import'] = array(
    'title' => t('Import Results'),
    'description' => 'Import results from spreadsheet',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plm_import_form'),
    'access arguments' => array('administer poker league'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'plm_file.inc',
  );
  $items['admin/plm/payout'] = array(
    'title' => t('Payout Editor'),
    'description' => 'View or edit payout structures',
    'page callback' => 'plm_payout_editor',
    'access arguments' => array('administer poker league'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'plm_admin.inc',
  );
  $items['admin/plm/payout/list'] = array(
    'title' => t('List Payouts'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'plm_admin.inc',
  );

  $items['admin/plm/payout/new'] = array(
    'title' => t('New Payout Structure'),
    'description' => 'Create a new payout atructure',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plm_edit_payset_form'),
    'access arguments' => array('administer poker league'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'plm_admin.inc',
  );
  $items['admin/plm/payout/edit'] = array(
    'title' => t('Payout'),
    'description' => 'Edit a payout structure',
    'page callback' => 'plm_payout_editor',
    //'page arguments' => array(4),
    'access arguments' => array('administer poker league'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'plm_admin.inc',
  );

  $items['admin/plm/payout/delete/%'] = array(
    'title' => t('Payout'),
    'description' => 'Delete a payout structure',
    'page callback' =>  'drupal_get_form',
    'page arguments' =>array('plm_payout_confirm_delete',4),
    'access arguments' => array('administer poker league'),
    'type' => MENU_CALLBACK,
    'file' => 'plm_admin.inc',
  );

  $items['admin/plm/payout/delrow/%/%'] = array(
    'title' => t('Payout'),
    'description' => 'Delete a row in a payout structure',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plm_payout_delete_row',4,5),
    'access arguments' => array('administer poker league'),
    'type' => MENU_CALLBACK,
    'file' => 'plm_admin.inc',
  );

  $items['admin/plm/payout/addrow/%'] = array(
    'title' => t('Payout'),
    'description' => 'Add a row to a payout structure',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plm_payout_add_row_form',4),
    'access arguments' => array('administer poker league'),
    'type' => MENU_CALLBACK,
    'file' => 'plm_admin.inc',
  );

  $items['admin/plm/payrule/%/%/%/edit'] = array(
    'title'         => t('Edit Payrule'),
    'description'   => 'Edit a single payout rule',
    //'load arguments' => array(4, 5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plm_payrule_form', 3, 4, 5),
    'access arguments' => array('administer poker league'),
    'file' => 'plm_admin.inc',
    'type' => MENU_CALLBACK,
    'menu_name' => 'plm',
  );
  
  $items['admin/plm/payrule/%/%/%/delete'] = array(
    'title'         => t('Delete Payrule'),
    'description'   => 'Delete a single payout rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plm_payrule_delete_form', 3, 4, 5),
    'access arguments' => array('administer poker league'),
    'file' => 'plm_admin.inc',
    'type' => MENU_CALLBACK,
    'menu_name' => 'plm',
  );

  $items['admin/plm/ajax/payout/load'] = array(
    'title' => 'update payout',
    'page callback' => 'plm_ajax_payout_load',
    'access arguments' => array('administer poker league'),
    'file' => 'plm_admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/plm/ajax/payout/save'] = array(
    'title' => 'update payout',
    'page callback' => 'plm_ajax_payout_save',
    'access arguments' => array('administer poker league'),
    'file' => 'plm_admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['plm/ajax/add_entrant'] = array(
      'page callback' => 'plm_ajax_add_entrant', 
      'access arguments' => array('administer poker league'),
      'file' => 'plm_admin.inc',
      'type' => MENU_CALLBACK,
  );
  $items['plm/ajax/del_entrant'] = array(
      'page callback' => 'plm_ajax_del_entrant', 
      'access arguments' => array('administer poker league'),
      'file' => 'plm_admin.inc',
      'type' => MENU_CALLBACK,
  );
  return $items;
  
}

function plm_payrule_load($payid, $num_players, $place) {
  //drupal_set_message("plm_payrule_load($payid, $num_players, $place)");
  return _plm_get_payrule($payid, $num_players, $place);
}
function plm_payset_load($payid) {
  drupal_set_message("plm_payset_load($payid)");
  return _plm_get_payset($payid);
}
function plm_enable() {

}

function plm_disable() {

}

function plm_menu_alter(){

}

function plm_perm() {
  return array(
    'access poker league content', 
    'access poker league member content' , 
    'administer poker league');
}

// implementation of hook_access()
function plm_access($op, $node, $account) {
  if ($op == 'create' || $op == 'update' || $op == 'delete') {
    return user_access('administer poker league', $account);
  }
  if ($op == 'view') {
    if (user_access('access poker league content', $account) )
      return TRUE;
  }
  return FALSE;
}

function plm_game_access($op, $node, $account) {
  if ($op == 'create' || $op == 'update' || $op == 'delete') {
    return user_access('administer poker league', $account);
  }
  if ($op == 'view') {
    if (user_access('access poker league content', $account) )
      return TRUE;
  }
  return FALSE;
}
function plm_entrants_tab_access($game) {
  $ret = user_access('access poker league content') && $game->list_entrants;
  //drupal_set_message('entrants_tab_access(' . $game->title . ') = ' . ($ret?'true':'false'));
  return $ret;
}
function plm_player_edit_access($player) {
  return (($GLOBALS['user']->uid == $player->uid) 
    || user_access('administer poker league'));
}

function plm_main() {
  //$content .= "<p>Poker League Manager Main Page</p>";
  $items = plm_menu();
  $content .= '<dl class="admin-list">';
  foreach ( $items as $path => $menu ) {
    $t = explode('/', $path);
    if ( count($t) == 2 ) {
      if (($t[0] == 'plm' ) 
          && $menu['type'] == MENU_NORMAL_ITEM) {
        $content .= '<dt>'. l($menu['title'], $path) .'</dt>';
        if ( isset($menu['description']) ) {
          $content .= '<dd>'. $menu['description'] .'</dd>';
        }
      }
    }
  }
  $content .= "</dl>";
  print theme('page', $content);

}

function plm_rankings($plm_season=NULL) {
  //$session_sid = $_SESSION['ranking_sid'];
  $current_sid=variable_get('plm_current_season', 0);

  //if (!isset($plm_season) && $session_sid > 0){
  //  $plm_season = _plm_get_season($session_sid);
  //}
  if (!isset($plm_season)){
    $plm_season = _plm_get_season($current_sid);
  }
  if (!isset($plm_season)){
    $output = '<p>No Season Selected<p>';
    return $output;
  }  
  drupal_set_title("$plm_season->title Rankings");

  $is_member = user_access('access poker league member content');
  $sid = $plm_season->sid;
  $output .= drupal_get_form('plm_ranking_season_form', $sid);

  $header = array(
    array(
      'data' => t('Rank'),
      'class' => 'numcol',
    ),
    array(
      'data' => t('Name'),
    ),
    array(
      'data' => t('Points'),
      'class' => 'numcol',
    ),
    array('data' => t('Places'),
      'class' => 'numcol',
    ),
  );
  // Hide cash stats!
  if ($is_member) {
    $header[] = array('data' => t('Winnings'));
  }
    // time since last points earned
  if ($sid == $current_sid){
    $header[] = array(
      'data' => t('Latest'),
      'class' => 'numcol',
    );
  }
  $players = _plm_get_rankings($sid);
  if (!$players) {
    $output .= '<p>No Results Found</p>';
    return $output;
  }
  $rank = 1;
  $tenth      = 0;
  foreach ($players as $rec) {
    if ($rank == 10) {
      $tenth = $rec->points;
    }
    if ($rank <= 10){
      $class = 'finalist';
    }
    else{
      $class = '';
    }
    $rowdata = array(
      array(
        'data' => $rank,      
        'class' => 'numcol',
      ),
      array(
        'data' => l(t($rec->name), 'plm/players/pid/' . $rec->pid),
      ),
      array(
        'data' => $rec->points,
        'class' => 'numcol',
      ),
      array(
        'data' => $rec->places ? $rec->places : '',
        'class' => 'numcol',
      ),
    );
    // Hide cash stats!
    if ($is_member) {
      $rowdata[] = array(
        'data' => $rec->cash ? '$' . $rec->cash : '',
        'class' => 'numcol',
      );
    }
    // time since last points earned
    if ($sid == $current_sid){
      //if ($rec->latest_place == 0)
      //  $data = format_plural($rec->latest_place, '1 day', '@count days');
      //else
      //if ($rec->latest_place < 7)
      //  $data = format_plural($rec->latest_place, '1 day', '@count days');
      //else
        $data = format_plural(round($rec->latest_place/7), '1 wk', '@count wks');
      $rowdata[] = array(
        'data' => $data,
        //'class' => 'narrowcol',
        'class' => 'numcol',
      );
    }
    
    $rank++;
    $rows[] = array( 
      'data'  => $rowdata, 
      'class' => $class);
  }

  $eoy_total  = _plm_get_eoy_total($plm_season, $games);
  $eoy_est    = _plm_get_eoy_est($plm_season, $eoy_total);
  $tenth_est  = _plm_get_est_cutoff_points($plm_season, $tenth);
  
  $output .= "<div class=\"eoy_stats\">\n";
  if ($is_member) {
    $output .= "<b>EOY Pool:</b> \$$eoy_total<br/>\n";
    $output .= "<b>EOY Estimate:</b> \$$eoy_est<br/>\n";
  }
  $output .= "<b>10th Place Estimate:</b> $tenth_est pts<br/>\n";
  $output .= "</div>\n";
  //$caption = $plm_season->title;
  return $output .= theme('table', $header, $rows, $attr, $caption);
}

function plm_season_title($plm_season) { 
  //drupal_set_message("plm_season_title(" . print_r($plm_season, TRUE) . ")");
  return $plm_season->title; 
} 

function plm_player_load($pid) {
  return _plm_get_player($pid);
}

function plm_entrant_load($entid) {
  return _plm_get_entrant($entid);
}

function plm_players_list($max_players_per_page=100) {
  global $pager_page_array, $pager_total;
  $is_member = user_access('access poker league member content');
  $is_admin = user_access('administer poker league');

  $output = '';
  drupal_set_title("All Poker Players");
  $num_players = _plm_get_num_players();
   $num_pages = ceil($num_players/$max_players_per_page);

  // override theme table's parameters 
  // so points, places and winnings sort in descending order
  if (isset($_GET['order'])){
    if ($_GET['order'] == 'Wins')     $_GET['sort'] = 'desc';
    if ($_GET['order'] == 'Places')   $_GET['sort'] = 'desc';
    if ($_GET['order'] == 'Points')   $_GET['sort'] = 'desc';
    if ($_GET['order'] == 'Winnings') $_GET['sort'] = 'desc';
    //if ($_GET['order'] == 'Last Played')     $_GET['sort'] = 'desc';
  }
  // make default sort column active
  // default sorted by winnings if logged in
  else if ($is_member) {
    $_GET['order'] = 'Winnings';
    $_GET['sort'] = 'desc';
  }
  // default sort by points otherwise
  else {
    $_GET['order'] = 'Points';
    $_GET['sort'] = 'desc';
  }
  $header = array(
    array(
      'data' => '', 
      'class' => 'numcol',
    ),
    array('data' => t('Name'),     
      'field' => 'name', 
      'sort' => 'asc' ),
    array(
      'data' => t('Wins'),     
      'field' => 'wins',
      'class' => 'numcol'),
    array(
      'data' => t('Places'),   
      'class' => 'numcol',
      'field' => 'places'),
    array(
      'data' => t('Points'),   
      'class' => 'numcol',
      'field' => 'points'),
  );

  // Hide cash stats!
  if ($is_member) {
    $header[] = array('data' => t('Winnings'),
                'class' => 'numcol',
                'field' => 'cash' );
    $header[] = array('data' => t('Last Played'),
                'field' => 'last_date' );
    $header[] = array('data' => t('Last Placed'),
                'field' => 'last_place' );
  }
  if ($is_admin) {
    $header[] = array('data' => t(''), 'colspan' => 1);
    //popups_add_popups();
  }
  $q = tablesort_sql($header);
  $players = _plm_get_players($q, '', $max_players_per_page);

  $resnum = 0;
  $page = $_GET['page'];
  if ($page > 0) $resnum = $page * $max_players_per_page;
  $now = time();
  foreach ($players as $rec) {
    $resnum++;
    $username = '';

    $display_name = $rec->name;
    if ($is_admin) {
      $player_user = $rec->uid ? user_load($rec->uid) : NULL;
      //drupal_set_message("$rec->name: $rec->uid ($player_user->name)");
      if ($player_user) {
        $username = " ($player_user->name)";
        $display_name = '<span class="member">'.$display_name.'</span>';
      }
    }
    $rowdata = array(
      array('data' => $resnum, 'class' => 'numcol',),
      l($display_name, 'plm/players/pid/' . $rec->pid,array('html' => true)),
      array('data' => $rec->wins, 'class' => 'numcol'),
      array('data' => $rec->places ? $rec->places : '0', 'class' => 'numcol'),
      array('data' => $rec->points,'class' => 'numcol'),
    );
  // Hide cash stats!
    if ($is_member) {
      $rowdata[] = array(
        'data' => $rec->cash ? '$' . $rec->cash : '', 
        'class' => 'numcol');    
      if ($rec->last_date>0) $elapsed = _plm_format_time_elapsed($now-$rec->last_date) ;
      else $elapsed = 'Never';
      $rowdata[] = array('data' => $elapsed);    
      if ($rec->last_place>0) $elapsed = _plm_format_time_elapsed($now-$rec->last_place) ;
      else $elapsed = 'Never';
      $rowdata[] = array('data' => $elapsed);    
    }
    if ($is_admin) {
      $rowdata[] = array(
        'data'  => l(t('edit'), 
                 'plm/players/pid/' . $rec->pid . '/edit'),
                 //array('attributes' => array('class' => 'popups-form'))),
        'class' => 'narrowcol');

    }
    $rows[] = $rowdata;
  }

  $output .= theme('pager', NULL, $max_players_per_page, 0, NULL, $num_pages);
  $output .= theme('table', $header, $rows);
  $output .= theme('pager', NULL, $max_players_per_page, 0, NULL, $num_pages);
  return $output;
}

function plm_player_view($player) {
  drupal_set_title('Player Profile');
  //drupal_set_title('Player Profile: ' . $player->name);
  //$output = "<p>Details of $player->name go here</p>\n";
  $output .= theme_plm_player_details($player);
  return $output;
}
function theme_plm_player_details($player) {

  $header = array(
    "Season",
    "Game",
    "Host",
    "Place", 
    "Points",
  );
  // Hide cash stats!
  if (user_access('access poker league member content')) {
    $header[] = "Winnings";
  }

  $cur_season = _plm_get_season(variable_get('plm_current_season', 0));

  $places = _plm_get_results_by_player($player->pid);
  if (!isset($places)) return '<p>No places on record.</p>';
  $sid    = NULL;
  $s_points   = array();
  $s_cash     = array();
  $s_wins     = array();
  $s_places   = array();
  $tot_points = 0;
  $tot_cash   = 0;
  $tot_wins   = 0;
  $tot_places = 0;

  foreach ($places as $r) {
    // Season Totals
    if ($sid && $sid != $r->sid){
      $rowdata = array(
        array('data' => t("$s->title Total"), 'colspan' => 4, 'header' => 1),
        array('data' => $s_points[$sid], 'class' => 'numcol'), 
      );

      // Hide cash stats!
      if (user_access('access poker league member content')) {
        $rowdata[] =  array('data' => '$' . $s_cash[$sid], 'class' => 'numcol');
      }

      $rows[] = array(
        'class' => 'subtot',
        'data' => $rowdata,
      );
      $tot_points += $s_points[$sid];
      $tot_cash   += $s_cash[$sid];
      $tot_wins   += $s_wins[$sid];
      $tot_places += $s_places[$sid];
      
    }
    if ($sid != $r->sid){
      $s = plm_season_load($r->sid);
    }
    
    $rowdata = array(
      $s->title,
      //$r->sid,
      l($r->title, "plm/games/$r->gid"), 
      $r->host,
      _plm_format_place($r->place),
      array('data' => $r->points, 'class' => 'numcol'),
    );
    // Hide cash stats!
    if (user_access('access poker league member content')) {
      $rowdata[] =  array('data' => '$' . $r->cash, 'class' => 'numcol');
    }
    $rows[] = $rowdata;
    
    $sid       = $r->sid;
    $s_points[$sid] += $r->points;
    $s_cash[$sid]   += $r->cash;
    $s_places[$sid]++;
    if ($r->place == 1)
      $s_wins[$sid]++;
  }
  // Last Season Total
  if ($sid){
    $rowdata = array(
      array('data' => t("$s->title Total"), 'colspan' => 4, 'header' => 1),
      array('data' => $s_points[$sid]), 
    );
    
    // Hide cash stats!
    if (user_access('access poker league member content')) {
      $rowdata[] =  array('data' => '$' . $s_cash[$sid]);
    }
    
    $rows[] = array(
      'class' => 'subtot',
      'data' => $rowdata,
    );
    $tot_points += $s_points[$sid];
    $tot_cash   += $s_cash[$sid];
    //drupal_set_message('<pre>' . print_r($rows, TRUE) . '</pre>');
  }
  // Grand Total
  $rowdata = array(
    array('data' => t("Grand Total"), 'colspan' => 4, 'header' => 1),
    array('data' => $tot_points, 'class' => 'numcol'),
  );
  if (user_access('access poker league member content')) {
    $rowdata[] = array('data' => '$' . $tot_cash);
  }
  
  $rows[] = array(
    'class' => 'subtot last',
    'data' => $rowdata,
  );
  
  // Player picture, bio, stats summary, etc...
  if (user_access('access poker league member content')) {

    $summary_rows = array();
    if (isset($cur_season)){
      // Current season stats
      $summary_rows[] = array(
        'class' => 'subhead',
        'data' => array(
          array('data' => $cur_season->title, 'header' => 1, 'colspan' => 2),
        )
      );
      $val = $s_points[$cur_season->sid];
      if (!isset($val)) $val = 0;
      $summary_rows[] = array(
        array('data' => 'Points', 'header' => 1),
        array('data' => $val, 'align' => 'right'),
      );
      $val = $s_cash[$cur_season->sid];
      if (!isset($val)) $val = 0;
      $summary_rows[] = array(
        array('data' => 'Winnings', 'header' => 1 ),
        array('data' => '$' . $val, 'align' => 'right'),
      );
     
      //drupal_set_message('<pre>' . print_r($summary_rows, TRUE) . '</pre>');
    }
    
    // All time stats
    $rowdata =  array('data' => 'All Time' , 'header' => 1, 'colspan' => 2);
    $summary_rows[] = array(
      'class' => 'subhead',
      'data' => array($rowdata),
    );
    $summary_rows[] = array(
      'data' => array(
        array('data' => 'Points', 'header' => 1),
        array('data' => $tot_points, 'align' => 'right'),
      ));
    $summary_rows[] = array(
      'data' => array(
        array('data' => 'Winnings', 'header' => 1 ),
        array('data' => '$' . $tot_cash, 'align' => 'right'),
      )
    );

    $output .= '<div class="player-summary">';
    if ($player->picture) {
      $output .= '<div class="player-picture"><img src="' 
        . url($player->picture) . '"/></div>';    
    }
    $output .= '<h1>' . $player->name . '</h1>';
    $attr = array('class' => 'stattable clear-block');
    $output .= '<div>';
    $output .= theme('table', array(), $summary_rows, $attr);
    $output .= '</div>';
    $output .= '</div>';
  }  
  
  $output .= theme('table', $header, $rows);
  return $output;
}
function plm_season_load($sid) {
  return _plm_get_season($sid);
}
//function plm_season_to_arg($s) {
//  return $s->sid;
//}

function plm_seasons_list() {
  //$output .= '<h5>plm_seasons_list()</h5>';
  drupal_set_title("Poker Seasons");
/*   $item = menu_get_item(); */
/*   foreach($item as $x => $y){ */
/*     print_r('<b>'); */
/*     print_r($x); */
/*     print_r('</b> =&gt; '); */
/*     print_r($y); */
/*     print_r('<br>'); */
/*   } */
  
  $seasons = _plm_get_seasons();
  if (!isset($seasons)){
    $output = "<p>There are no seasons configured</p>";
    return $output;
  }
  $list = array();
  $fmt = 'D, M j Y';
  $current = variable_get('plm_current_season', 0);
  foreach ($seasons as $s) {
    $datestr = format_date($s->start_date, 'custom', $fmt, 0);
    if ($s->end_date) $datestr .= " to " . format_date($s->end_date, 'custom', $fmt, 0);
    else $datestr = 'Started ' . $datestr;
    //$output .= "<p>item($s->title, $datestr)</p>";
    
    if ($s->sid == $current) {
      $list[] = '<div class="current">' 
        . l($s->title, "plm/seasons/$s->sid") 
        . '</div>'
        . "<div>$datestr</div>";
    }
    else{
      $list[] = l("$s->title", 
                "plm/seasons/$s->sid") 
        . "<div>$datestr</div>";
    }
  }
  $output .= theme('item_list', $list);
  return $output;
}

function theme_plm_season($season, $teaser=NULL) {
  //$output .= t("<p>theme_plm_season()</p>");
  $output .= theme_plm_date_range($season, $teaser);
  $label = 'Games';
  $num_games = _plm_get_num_games($season->sid);
  $output .= "<div class=\"plm_game_list\">";
  $output .= "<div class=\"num_games\">$label: $num_games</div>";
  if ($num_games == 0 || $teaser) return $output . '</div>';
  $output .= theme_plm_upcoming_games($season);
  $output .= theme_plm_game_list($season, $teaser);
  return $output;
}
function theme_plm_upcoming_games($season){
  if (!user_access('access poker league member content')) return '';

  global $user;
  $games = _plm_get_upcoming_games($season->sid);
  if (!isset($games)) {
    //$output .= '<p> None scheduled<p>';
    return $output;
  }
  $today = time() + $user->timezone;
  //$today = time();
  //drupal_set_message("Today1: $today");
  $today = floor($today/86400)*86400;

  //drupal_set_message("Today2: $today");
  $fmt = 'D, M j';
  $found_upcoming=FALSE;
  foreach ($games as $g) {
    // Adjust for timezone if date is set to midnight
    //if (!($g->game_date % 86400))
    //  $g->game_date -= $user->timezone;
    //  Pass 0 for timezone arg to prevent conversion of date
    $datestr = format_date($g->game_date, 'custom', $fmt, 0);
    $days = ($g->game_date - $today) / 86400;
    $daystr=NULL;
    //drupal_set_message("$g->title: $days days");
    if ($days == 0) $daystr = 'Tonight';
    else if ($days == 1) $daystr = 'Tomorrow';
    else if ($days < 7) $daystr = 'This Week';
    //else continue;
    else if ($days < 14) {$daystr = 'Next Week';}
    else if ($days < 28) {
       $weeks = ceil($days/7);
       $daystr = "In $weeks Weeks";
     }
    // if (!$found_upcoming){
    //   $output .= '<div class="upcoming">';
    //   $output .= "<h2>Upcoming:</h2>";
    //   $found_upcoming = TRUE;
    // }
    //$output .= "<hr/>\n";
    if ($daystr)
      $output .= "<h3>$daystr:</h3> ";
    $output .= "<p><b>$g->title</b> will be"
      . ($g->hid ? " hosted by $g->host" : ' held')
      . " on $datestr.</p>";
    if ($g->hid == 1) {
      $output .= '<a href="http://maps.google.com/maps?f=q&amp;source=embed&amp;hl=en&amp;geocode=&amp;q=3308+La+Veta+Dr+NE,+Albuquerque,+NM+87110&amp;sll=35.119593,-106.584249&amp;sspn=0.014357,0.027337&amp;ie=UTF8&amp;ll=35.12391,-106.581931&amp;spn=0.012285,0.018239&amp;z=15" style="color:#0000FF;text-align:left">Map to 3308 La Veta Dr NE</a>';
    }
    else if ($g->host == "Jack") {
      $output .= '<a href="http://maps.google.com/maps/ms?doflg=ptm&amp;ie=UTF8&amp;t=h&amp;msa=0&amp;msid=104926193960871148832.00047820e533b2039ba91&amp;ll=35.256834,-106.509705&amp;spn=0.392487,0.583649&amp;z=10" target="_blank">Map to 111 Camino de Las Huertas in Placitas</a>';
    }
  }
  if ($found_upcoming)
    $output .= '</div>';
  return $output;
}
function theme_plm_date_range($season, $teaser) {
  //$output = '<p>"theme_plm_date_range"</p>';
  $label = 'Starts';
  $now = gmmktime();
  if ($season->start_date < $now) $label = 'Started';
  $fmt = 'D, M j, Y';
  //$datestr = date($fmt, $season->start_date);
  // Don't do timezone conversion
  $datestr = format_date($season->start_date, 'custom', $fmt, 0);
  $output .= t(
    '<div>@label: @datestr</div>', array(
      '@label' => $label, 
      '@datestr' => $datestr,
    )
  );
  if ($season->end_date == 0) return $output;
  
  $label = 'Ends';
  if ($season->end_date < $now) $label = 'Ended';
  //$datestr = date($fmt, $season->end_date);
  // Don't do timezone conversion
  $datestr = format_date($season->end_date, 'custom', $fmt, 0);
  $output .= t(
    '<div>@label: @datestr</div>',
    array(
      '@label' => $label, 
      '@datestr' => $datestr));
  return $output;// . "</div>";
}

function theme_plm_game_list($season, $teaser) {
  global $user;
  //$output = '<p>"theme_plm_game_list"</p>';
  $is_admin = user_access('administer poker league');

  $header = array('Game', 'Date', 'Host', 
            array('data' => 'Entrants',
            'class' => 'numcol'), 
            'Winner', '');

  $header[] = '';


  $games = _plm_get_games($season->sid);
  
  foreach ($games as $game) {
    //drupal_set_message("$game->title: announced=$game->announced");
    if (!($game->announced) && (!$is_admin)) continue;
    
    // Dates are stored in unix epoch format in db (gmt), but the date widget 
    // truncates it to the day.  Problem is that format_date() assumes it's an exact time 
    // and will convert the date to our time zone first, 
    // displaying the previous date if the value has been truncated. 
    
    //if (!($game->game_date % 86400))
    //  $game->game_date -= $user->timezone;

    //$date_str = date("m-d-Y", $game->game_date);
    //$date_str = date("n/j/Y", $game->game_date);
    //$date_str = date("D, M j Y g:iA", $game->game_date);
    ///$date_str = date("D, M j Y", $game->game_date);
    $date_str = format_date($game->game_date,'custom',"D, M j Y", 0);
    $rowdata = array(
      l($game->title, "plm/games/$game->gid"),
      $date_str,
      $game->host,
      array(
        'data' => $game->num_players ? $game->num_players : '',
        'class' => 'numcol'),
      $game->wid ? l($game->winner, "plm/players/pid/$game->wid") : '',
      $game->finished 
      ? l(t('results'), "plm/games/$game->gid") 
      : ($is_admin
        ? l(t('edit'), "plm/games/$game->gid/edit") : ''),
    );
    $rowclass = NULL;
    if ($game->announced){
      $rowclass = 'announced';
    }
    if ($game->finished) {
      $rowclass = 'finished';
    }
    if (!$rowclass){
      $rows[] = $rowdata;
      continue;
    }
    $rows[] = array(
      'data' => $rowdata,
      'class' => $rowclass);
    
  }

  $output .= theme('table', $header, $rows);
  $output .= "</div>\n";
  return $output;
}


function plm_current_season_view() {
  $season = _plm_get_current_season();
  return plm_season_view($season);
  
}
function plm_season_view($plm_season=NULL) {
  if (!isset($plm_season)){
    $sid=variable_get('plm_current_season', 0);
    $plm_season = _plm_get_season($sid);
  }
  if (!isset($plm_season)){
    $output = '<p>No Season Selected<p>';
    return $output;
  }  

  drupal_set_title("$plm_season->title");

  $output .= theme_plm_season($plm_season);
  return $output;
}

function plm_seasons() {
  return '<p>plm_seasons()</p>' . plm_mainpage(null, null);
}


function plm_game_load($node) {
  return _plm_get_game($node);
}
function plm_game_view($game, $teaser = FALSE, $page = FALSE) {
  $season = _plm_get_season($game->sid);
  $title = "$season->title: $game->title";
  drupal_set_title($title);
  //$output .= theme_plm_game_details($game);
  $output .= theme('plm_game_details',$game);
  if ($teaser) return $output;
  return $output;
}

function theme_plm_game_details($game, $season=NULL) {
  if (isset($season) && $season->sid == $game->sid) 
    $s = $season;
  else 
    $s = _plm_get_season($game->sid);

  $is_member = user_access('access poker league member content');

  $output .= '<div class="details">';
  //$output .= '<div class="details container-inline-block">';
  $label = 'Season';
  $title = $s->title;
  $output .= '<h2>';
  $output .= "$label: " . l(t("@title", array('@title'=>$title)),
                           "plm/seasons/$s->sid");
  $output .= '</h2>';
  $label = 'Game Date';
  $fmt = 'D, M j Y';
  $datestr = format_date($game->game_date, 'custom', $fmt, 0);
  $output .= "<div class=\"pl_game_date\">$label: $datestr</div>";
  $label = 'Host';
  $rec = _plm_get_player($game->hid);
  $name = $rec->name;
  if (!$name) $name = 'None';
  $output .= "<div class=\"game_host\">$label: $name</div>";
  if ($game->num_players){
    $label = 'Entrants';
    $num_players = $game->num_players;
    $output .= "<div class=\"num_players\">$label: $num_players</div>";
    if ($is_member) {
      $output .= "<div>Initial Pot: \$$game->pot_start</div>\n";
      $output .= "<div>Buy-in: \$$game->buyin</div>\n";
      $pot_total = $game->pot_start + $game->buyin * $game->num_players;
      $output .= "<div>Total Pot: \$$pot_total</div>\n";
    }
  }
  $output .= '</div>';
  if ($game->finished){
    $output .= '<div id="game-results" class="details">';
    $output .= '<h3>Results</h3>';
    $results = _plm_get_results($game->gid);
    $output .= theme('plm_game_results',$game, $results);
    $output .= '</div>';
  }

  if ($game->list_entrants) {
    $output .= '<div id="entrant-list" class="details">';
    $output .= '<h3>Entrants</h3>';
    $entrants = _plm_get_game_entrants($game->gid);
    $output .= theme('plm_game_entrants', $game, $entrants);
    $output .= '</div>';
  }
  return $output;
}
function theme_plm_game_date($game) {
  $label = 'Game Date';
  $fmt = 'D, M j Y';
  $datestr = format_date($game->game_date, 'custom', $fmt, 0);
  $output .= "<div class=\"pl_game_date\">$label: $datestr</div>";
  return $output;
}
function theme_plm_game_host($game) {
  $label = 'Host';
  $rec = _plm_get_player($game->hid);
  $name = $rec->name;
  if (!$name) $name = 'None';
  $output = "<div class=\"game_host\">$label: $name</div>";
  return $output;
}
function theme_plm_game_num_players($game) {
  $label = 'Entrants';
  $num_players = $game->num_players;
  $output = "<div class=\"num_players\">$label: $num_players</div>";
  return $output;
}
function theme_plm_game_season($season) {
  $label = 'Season';
  $title = $season->title;
  $output = "$label: " . l(t("@title", array('@title'=>$title)),
                           "plm/seasons/$season->sid");
  return $output;
}

function plm_result_load($gid, $place) {
  $res = _plm_get_result($gid, $place);
  if (!$res) {
    $game = _plm_get_game($gid);
    $res = _plm_result_new($game, $place);
  }
  return $res;
}
// blank game result
function _plm_result_new($game, $place) {
  $res->gid = $game->gid;
  $res->place  = $place;
  $res->points = _plm_rules_default_points($game, $place);
  $res->cash   = _plm_rules_default_payout($game, $place);
  return $res;
}

function _plm_result_row($result) {
  $row = array(
    _plm_format_place($result->place),
    l(t($result->name), 'plm/players/pid/' . $result->pid),
    array('data' => $result->points, 'class' => 'numcol'),
  );
  // Hide cash stats!
  if (user_access('access poker league member content')) {
    $row[] = array('data' => '$' . $result->cash, 'class' => 'numcol');
  }
  
  return $row;
}

function theme_plm_game_results($game, $results) {
  $gid = $game->gid;
  $is_member = user_access('access poker league member content');
  $is_admin = user_access('administer poker league');

  
  if (!$results && !$is_admin){
    return '<p>No Results Posted</p>';
  }
  $header = array(
    'Place', 'Player', array('data' =>'Points', 'class' => 'numcol')
  );
  // Hide cash stats!
  if ($is_member) {
    $header[] = array('data' => '$$$', 'class' => 'numcol');
  }
  if ($is_admin){
    //$header[] = 'Operation';
    $header[] = '';
    popups_add_popups();
  }

  $num_places = $game->num_players;
  //if ($num_places > 5) $num_places = 5;
  if ($game->finished) $num_places = count($results);
  // Add up total prizepool
  $total = 0;

  $expected_pot_total = $game->pot_start + $game->buyin * $game->num_players;
  // Format results in table
  for ($place=1;$place<=$num_places;$place++){
    $r = $results[$place];
    // display blank result for admin if not set
    if (!$r){
      if ($total >= $expected_pot_total) continue;
      $r = _plm_result_new($game, $place);
    }
    $row = _plm_result_row($r);
    if ($is_admin){
      if ($game->finished) 
        $row[] = '';
      else{
        $row[] = l(t('edit'), 
                 "plm/results/$r->gid/$r->place/edit",
                 array('attributes' => array('class' => 'popups-form')));
      }
    }
    $rows[] = $row;
    $total += $r->cash;
  }
  
  $rem = $expected_pot_total - $total;

  // make sure the payouts add up,
  // but if we don't have access to cash stats, skip it
  if ($is_member && $rem != 0) {
    $pre = '$';
    if ($rem > 0) $style = 'color: #006600';
    else if ($rem < 0){
      $style = 'color: #660000';
      // $-5 looks too weird...try ($5) instead
      $pre = '($';
      $rem = -$rem;
      $post = ')';
    }
    else $style = 'color: #444';

    if ($is_admin){
      $lastrow = array(
        array('data' => 'Pot Remaining', 'header' => 1, 'colspan' => 3),
        array('data' => $pre . $rem . $post, 'style' => $style));
      $rows[] = array('class' => 'subtot', 'data' => $lastrow);
    }
  }
  
  //$output .= "<div><b>Total Pot:</b> \$$expected_pot_total</div>";
//   if ($game->finished) {
//     $caption = t('Final Results');
//   }
//   else {
//     $caption = t('Tentative Results');
//   }
  $output .= theme('table', $header, $rows, NULL, $caption);
  return $output;
}


function plm_block($op = 'list', $delta = 0, $edit = array()) {
  //drupal_set_message("plm_block op=$op delta=$delta edit=" . print_r($edit, TRUE));
  switch ($op) {
    case 'list':
      // If $op is "list", we just need to return a list of block descriptions.
      // This is used to provide a list of possible blocks to the administrator,
      // end users will not see these descriptions.
      // A block can provide default settings.
      $blocks = array(
        array(
          'info'       => t('PLM Leaderboard'),
          'cache' => BLOCK_NO_CACHE
        ),
        array(
          'info'       => t('PLM Results'),
          'cache' => BLOCK_NO_CACHE
        ),
        array(
          'info'       => t('PLM Upcoming Games'),
          'cache' => BLOCK_NO_CACHE
        ),
      );
        
      return $blocks;
    case 'configure':
      // If $op is "configure", we need to provide the administrator with a
      // configuration form. The $delta parameter tells us which block is being
      // configured. In this example, we'll allow the administrator to customize
      // the text of the first block.
      $form = array();
      if ($delta == 0) {
        // All we need to provide is a text field, Drupal will take care of
        // the other block configuration options and the save button.
        //$form['block_example_string'] = array(
        //  '#type' => 'textfield',
        //  '#title' => t('Block contents'),
        //  '#size' => 60,
        //  '#description' => t('This string will appear in the example block.'),
        //  '#default_value' => variable_get('block_example_string',  t('Some example content.')),
        //);
      }
      return $form;
    case 'save':
      // If $op is "save", we need to save settings from the configuration form.
      // Since the first block is the only one that allows configuration, we
      // need to check $delta to make sure we only save it.
      //if ($delta == 0) {
      // Have Drupal save the string to the database.
      //  variable_set('block_example_string', $edit['block_example_string']);
      //}
      //return;
    case 'view': default:
      switch ($delta) {
        case 0:
          $block['subject'] = t('Leaderboard');
          $block['content'] = theme('plm_leaderboard_block');
          break;
        case 1:
          $block['subject'] = t('Latest Results');
          $block['content'] = theme('plm_results_block');
          break;
        case 2:
          $block['subject'] = t('Upcoming Games');
          $block['content'] = theme('plm_upcoming_block');
          break;
      }
      return $block;
  }
}

/**
 * Implementation of hook_theme()
 */
function plm_theme($existing, $type, $theme, $path) {
  //drupal_set_message('plm_theme');  
  return array(
    'plm_leaderboard_block' => array(
      'arguments' => array('plm_season' => NULL),
    ),
    'plm_results_block' => array(
      'arguments' => array('plm_season' => NULL, 'plm_game' => NULL),
    ),
    'plm_upcoming_block' => array(
      'arguments' => array('plm_season' => NULL),
    ),
    'plm_nav_menu' => array(
      'arguments' => array('tree' => NULL),
    ),
    'plm_game_details' => array(
      'arguments' => array('plm_game' => NULL, 'plm_season' => NULL),
    ),
    'plm_game_results' => array(
      'arguments' => array('plm_game' => NULL, 'plm_results' => NULL),
    ),
    'plm_game_entrants' => array(
      'arguments' => array('plm_game' => NULL, 'plm_entrants' => NULL),
    ),
    'plm_entrants_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'plm_admin.inc'),
  );
}

function theme_plm_upcoming_block($plm_season=NULL) {
  //$output .= "<div>Upcoming</div>";
  if ( !isset($plm_season) ) {
    $plm_season = plm_season_load(variable_get('plm_current_season', 0));
  }
  if ( !isset($plm_season) ) {
    $output .= '<p>No Current Season!</p>';
    return $output;
  }
  $output .= theme_plm_upcoming_games($plm_season);
  return $output;
}
function theme_plm_leaderboard_block($plm_season=NULL) {
  global $user;
  //drupal_set_message('theme_plm_leaderboard_block');
  if ( !isset($plm_season) ) {
    $plm_season = plm_season_load(variable_get('plm_current_season', 0));
  }
  if ( !isset($plm_season) ) {
    $output .= '<p>No Current Season!</p>';
    return $output;
  }
  $has_newpoints = FALSE;
  $tz_offset = $user->timezone;
  // convert seconds to pure date (in local tz)
  $now = floor((time() + $tz_offset)/86400) * 86400;

  // get latest game that is finished
  $game = _plm_get_latest_game($plm_season->sid, TRUE); 
  if (isset($game)){
    $results = _plm_get_results($game->gid);
    $update_age = round(($now - $game->game_date) / 86400);
  }
  
  // $header = array(
  //   array('data' => ''), // Rank
  //   array('data' => t('Name')),
  //   array('data' => t('Points')),
  //   //array('data' => t('Winnings')),
  //   //array('data' => t('Places')),
  // );
  $players = _plm_get_rankings($plm_season->sid);
  if (!$players) {
    $output .= '<p>No Results Found</p>';
    return $output;
  }
  $rank = 1;
  $tenth = 0;
  $max_points = 10;
  $max_entries = 15;
  foreach ($players as $rec) {
    if ($rank == 10) $tenth = $rec->points;
    if ($rank > $max_entries) break;
    // Include anybody on the bubble...
    if ($rank > 10 && ($rec->points <= $tenth-$max_points || $rec->points <= 0)){
      break;
    }
    $rowdata = array(
      array(
        'data' => $rank, 
        'class' => 'numcol'),
      array(
        'data' => l(t($rec->name), 'plm/players/pid/' . $rec->pid),
      ),
      //$rec->cash ? '$' . $rec->cash : '',
      //$rec->places ? $rec->places : '',
    );
    $points = $rec->points;
    // Find new points!
    $newpoints = '';
    if (isset($results)){
      foreach ($results as $r){
        if ($r->pid != $rec->pid) continue;
        $newpoints = " <span class= \"newpoints\"><b>(+$r->points)</b></span>";
        $has_newpoints = TRUE;
        break;
      }
    }
    $rowdata[] = array(
      'data' => $points, 
      'class' => 'numcol',
    );
    $rowdata[] = $newpoints;

    $num_final = 10;
    if ($rank <= $num_final) 
      $class = 'plm-final';
    else 
      $class = 'plm-bubble';

    $rows[] = array('data' => $rowdata, 'class' => $class);
    $rank++;
  }
  //$caption = $plm_season->title;
  if ($has_newpoints){
    $fmt = 'D, n/j/y';
    $datestr = format_date($game->game_date, 'custom', $fmt, 0);
    $output .= "<div class=\"newpoints\">Updated $datestr<br/>";
    $days = format_plural($update_age, '1 day', '@count days');
    $output .= "($days ago)</div>";
  }
  $attr = array('class' => 'compact-table');
  $output .= theme('table', $header, $rows, $attr, $caption);
  $output .= '<div class="more">' . l(t('More...'), "plm/seasons/$plm_season->sid/rankings") . '</div>';
  return $output;
}

function theme_plm_results_block($s=NULL, $game=NULL) {
  if (!isset($game)) {
    if (!isset($s)) {
      $sid = variable_get('plm_current_season', 0);
      $s = _plm_get_season(variable_get('plm_current_season', 0));
    }
    else 
      $sid = $s->sid;
    if (!$sid) return '';
    $game = _plm_get_latest_game($sid, TRUE);
    if (!isset($game)) return '';
  }
  $results = _plm_get_results($game->gid);
  //drupal_set_message('theme_plm_results_block() <br>'
  //  . 'season=<pre>' . print_r( $sid , TRUE) . '</pre>'
  //  . 'game=<pre>' . print_r( $game , TRUE) . '</pre>'
  //  . 'results=<pre>' . print_r( $results , TRUE) . '</pre>');
  if (!isset($results)) return '';

  $output = "<div class=\"plm-game-info\">";
  
  $fmt = 'D, M j Y';
  $datestr = format_date($game->game_date, 'custom', $fmt, 0);

  $output .= '<div><h3>' .  
    l($s->title . ': ' .$game->title, "plm/games/$game->gid") . '</h3></div>';
  $output .= "<div>$datestr</div>";
  $output .= "<div>$game->num_players Players</div>";
  $output .= "<div>Host: " . l($game->host, 'plm/players/pid/' . $game->hid) . "</div>";
  $output .= "</div>";

  $is_member = user_access('access poker league member content');

  foreach ($results as $r) {
    $rowdata = array( 
      _plm_format_place($r->place),
      l($r->name, 'plm/players/pid/' . $r->pid)
    );
    if ($is_member) {
      $rowdata[] = array('data' => '$' . $r->cash, 'class' => 'numcol');
    }
    $rows[] = $rowdata;
  }
  $attr = array('class' => 'compact-table');
  $output .= theme("table", NULL, $rows, $attr);
  return $output;
}

function theme_plm_nav_menu() {

}

function plm_entrants_list($plm_game) {
  if (!isset($plm_game)) return;

  $season = _plm_get_season($plm_game->sid);
  $title = "$season->title: $plm_game->title Entrants";
  drupal_set_title($title);

  $entrants = _plm_get_game_entrants($plm_game->gid);
  $output .= theme('plm_game_entrants', $plm_game, $entrants);
  return $output;
}

function theme_plm_game_entrants($plm_game, $entrants) {
  //drupal_set_message('theme_drupal_plm_game_entrants()');
  $is_admin = user_access('administer poker league');
  
  if (!$entrants && 
    ($game->finished && !$is_admin)) {
    return '';
  }
  $headers = array();
  if (!$plm_game->finished && $is_admin) {
    $headers[] = '';
    //drupal_add_js('misc/autocomplete.js');
    //popups_add_popups();
  }
  $headers[] = array('data' => '#', 'class' => 'numcol');
  $headers[] = array('data' => 'Name');

  
  
  if ($entrants && count($entrants)) {
    $num = 0;
    $imgpath = drupal_get_path('module', 'plm') . '/img';
    $delimg = "/$imgpath/del_button.png";
    foreach ($entrants as $ent) {
      $rowdata = array();
      if (!$plm_game->finished && $is_admin) {
        $rowdata[] = array(
//           l('edit', "plm/entrants/$ent->entid/edit",
//             array('query' => drupal_get_destination(),
//               'attributes' => array('class' => 'popups-form')))
//           . ' ' . 
//           l('delete', 
//             "plm/entrants/$ent->entid/delete",
//             array('query' => drupal_get_destination(),
//               'attributes' => array('class' => 'popups-form')));
          'data' => '<a href="/plm/entrants/' . $ent->entid. '/delete"><img src="' . $delimg . '"/></a>',
          'class' => 'narrow-mid-col');
      }
      $rowdata[] = 
        array('data' => ++$num, 'class' => 'numcol');
      $rowdata[] = 
        l($ent->name, "plm/players/pid/$ent->pid");
      $rows[] = $rowdata;
    }
  }
  
  //if (!$plm_game->finished && $is_admin && $rows) {
  //  $output .= '<div class="hpane">';
  //}
  //$hpane_table = array();
  if (!$plm_game->finished && $is_admin) {
//     $addlink = '<div>';
//     $addlink .= l('Add Entrant', "plm/games/$plm_game->gid/entrants/add",
//                array('query' => drupal_get_destination(),
//                  'attributes' => array('class' => 'popups-form')));
//     $addlink .= '</div>';
    //$output .= $addlink;
    //$output .= drupal_get_form('plm_entrants_form', $plm_game);
    //$hrow[] = array(
    //  'data' => drupal_get_form('plm_entrants_form', $plm_game),
    //  'class' => 'top-aligned'
    //);
  }
  if ($rows){
    $attr = array('id' => 'plm-entrants-list');
    $output .= '<div class="layout-box">';
    $output .= '<div id="tbl-wrapper">';
    $caption = 'Registered Players:';
    $output .= theme('table', $headers, $rows, $attr, $caption);
    //$attr2 = array( 'class' => 'top-aligned');
    //$hrow[] =  array(
    //  'data' => theme('table', $headers, $rows, $attr),
    //  'class' => 'top-aligned'
    //);
    $output .= '</div>';
    $output .= '</div>';
    //if (!$plm_game->finished && $is_admin) {
    //  $output .= $addlink;
    //}
    //$hpane_table[] = $hrow;
  }
  //$attr2 = array('class' => 'layout-table');
  //$output .= theme('table', NULL, $hpane_table, $attr2);
  //if (!$plm_game->finished && $is_admin && $rows) {
  //  $output .= '</div>';
  // }
  return $output;
  
}

function plm_player_autocomplete($string = '') {
  $matches = array();
  if ($string) {
    $matches = _plm_get_players_autocomplete($string);
  }
  drupal_json($matches);
}

// function plm_season_select($form_id='plm_season_sel', $sid=0, $path=''){
//   $form['season_sel'] = array(
//     '#type' => 'select',
//     '#title' => t('Current Season'),
//     '#description' => 'Season currently underway.  Used for Schedule and Leaderboard.',
//     '#default_value' => $sid,
//     '#options' => array(
//       0 => t('None'),
//     ),
//   );
//   $seasons = _plm_get_seasons();
//   if (isset($seasons)) {
//     foreach ($seasons as $s) {
//       $form['season_sel']['#options'][$s->sid] = $s->title;
//     }
//   }
//   $form['submit'] = array('#type' => 'submit', '#value' => t('Go'));
//   $form['#action'] = url('search/node');
//   return $form;
// }
// function plm_season_select_form($form_id = 'plm_season_sel') {
//   return drupal_get_form($form_id);
// }


// implementation of hook_user
function plm_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'form') {
    if ($category == 'account') {
      // We are at edit screen. Load form data for 'Poker League' category.
      $form = profile_form_profile($edit, $user, 'Poker League');
      $form['Poker League']['#weight'] = -9;
      $form['Poker League']['#attributes'] = array('id' => 'pokerleague');
      $form['Poker League']['#title'] = t('Poker League');
      $player = _plm_get_player_by_uid($account->uid);
      //drupal_set_message('<pre>'.print_r($player, TRUE).'</pre>');
      //drupal_set_message('<pre>'.print_r(NULL, TRUE).'</pre>');
      $name = ($player->pid > 0) ?
        l($player->name, 'plm/players/pid/' . $player->pid) : 'None';
      //$form['Poker League']['Player Name'] = array(
      //'#type' => 'textfield',
      //'#value'       => "<h3>Player Name</h3>"$name,
      //'#title' => 'Player Name',
      //'#disabled' => true,
      //'#description' => 'This is the name that is used in the game stats.',
      //);
      $form['Poker League']['Player Name'] = array(
        '#value' => 
        "<div class=\"form-item\">
        <label>Player Name:</label> 
         $name
         <div class=\"description\">
           This is the name that is used in the game stats.
         </div>
         </div>",
      );
    }
    return $form;
  }
}


// function plm_form_user_profile_form_alter(&$form, $form_state) {
   //      drupal_set_message('<pre>' . print_r($form, TRUE) . '</pre>');
//   $form_id = 'user_profile_form';
//   $form['myid'] = array(
//     '#value' => "<p><b>$form_id</b></p>",
//     '#weight' => -10000,
//   );
//}

function plm_ranking_season_form($form_state, $selection_id = 0) {
  //drupal_set_message("plm_ranking_season_form(" . print_r($selection_id, true) .")");
  $seasons = _plm_get_seasons();
  if (!isset($seasons) || count($seasons) < 2) return NULL;

  $options = array();//(0 => ' Select a season');
  foreach ($seasons as $s) {
    $label = $s->title;
    //if ($s->sid == $selection_id) $label = "<b>$label</b>";
    $options[$s->sid] = $label;//$s->title;
  }
  $form['season_sel'] = array(
     '#type'          => 'select',
     '#default_value' => $selection_id,
     '#options'       => $options,
  );
  $form['season_submit'] = array(
    '#type'           => 'submit',
    '#value'          => 'Go',
  );
  return $form;
}

function plm_ranking_season_form_submit($form, &$form_state) {
  $op = $form_state['values']['op'];
  $sid = $form_state['values']['season_sel'];
  $season = _plm_get_season($sid);
  //drupal_set_message('Selected ' . $season->title);
  //$_SESSION['ranking_sid'] = $sid;
  $form_state['redirect'] = "plm/seasons/$sid/rankings";
}
